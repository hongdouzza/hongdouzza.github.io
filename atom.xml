<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>红豆zza~blog</title>
  
  <subtitle>有趣的blog</subtitle>
  <link href="https://hongdouzza.github.io/atom.xml" rel="self"/>
  
  <link href="https://hongdouzza.github.io/"/>
  <updated>2024-03-25T15:26:46.012Z</updated>
  <id>https://hongdouzza.github.io/</id>
  
  <author>
    <name>红豆zza</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java_Learning1</title>
    <link href="https://hongdouzza.github.io/posts/dc874005.html"/>
    <id>https://hongdouzza.github.io/posts/dc874005.html</id>
    <published>2024-03-25T02:27:21.000Z</published>
    <updated>2024-03-25T15:26:46.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【JAVA学习笔记1】-面向对象基础"><a href="#【JAVA学习笔记1】-面向对象基础" class="headerlink" title="【JAVA学习笔记1】 面向对象基础"></a>【JAVA学习笔记1】 面向对象基础</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="private字段"><a href="#private字段" class="headerlink" title="private字段"></a>private字段</h3><p>当字段被修饰为<code>private</code>时，外部代码无法访问该字段。我们可以用调用类里的方法间接访问该字段，确保了封装性和安全性</p><h3 id="private方法"><a href="#private方法" class="headerlink" title="private方法"></a>private方法</h3><p>和<code>private</code>字段一样，<code>private</code>方法也不允许类外的代码调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        ming.setBirth(<span class="number">2008</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(<span class="type">int</span> birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用private方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calcAge</span><span class="params">(<span class="type">int</span> currentYear)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>观察上述代码，<code>calcAge()</code>是一个<code>private</code>方法，外部代码无法调用，但是，内部方法<code>getAge()</code>可以调用它。此外，我们还注意到，这个<code>Person</code>类只定义了<code>birth</code>字段，没有定义<code>age</code>字段，获取<code>age</code>时，通过方法<code>getAge()</code>返回的是一个实时计算的值，并非存储在某个字段的值。这说明方法可以封装一个类的对外接口，调用方不需要知道也不关心<code>Person</code>实例在内部到底有没有<code>age</code>字段。</p></blockquote><h3 id="可变参数（E）"><a href="#可变参数（E）" class="headerlink" title="可变参数（E）"></a>可变参数（E）</h3><p>可变参数用类型…定义，可变参数相当于数组类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(String... names)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的<code>setNames()</code>就定义了一个可变参数。调用时，可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">g.setNames(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cow&quot;</span>); <span class="comment">// 传入3个String</span></span><br><span class="line">g.setNames(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>); <span class="comment">// 传入2个String</span></span><br><span class="line">g.setNames(<span class="string">&quot;cat&quot;</span>); <span class="comment">// 传入1个String</span></span><br><span class="line">g.setNames(); <span class="comment">// 传入0个String</span></span><br></pre></td></tr></table></figure><br>完全可以把可变参数改写为<code>String[]</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(String[] names)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，调用方需要自己先构造<code>String[]</code>，比较麻烦。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">g.setNames(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cow&quot;</span>&#125;); <span class="comment">// 传入1个String[]</span></span><br></pre></td></tr></table></figure><p>另一个问题是，调用方可以传入<code>null</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">g.setNames(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><br>而可变参数可以保证无法传入null，因为传入0个参数时，接收到的实际值是一个空数组而不是null。</p><p>可变参数感觉跟重载异曲同工嘛，都由参数形式决定方法的结果。</p><h3 id="参数绑定（E）"><a href="#参数绑定（E）" class="headerlink" title="参数绑定（E）"></a>参数绑定（E）</h3><blockquote><p>调用方把参数传递给实例方法时，调用时传递的值会按参数位置一一绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本类型参数绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">15</span>; <span class="comment">// n的值为15</span></span><br><span class="line">        p.setAge(n); <span class="comment">// 传入n的值</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15</span></span><br><span class="line">        n = <span class="number">20</span>; <span class="comment">// n的值改为20</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15还是20?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时<code>n</code>和<code>p.age</code>两者互不影响，<code>setAge()</code>方法复制了<code>n</code>的值</p></blockquote><p>重点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用类型参数绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        String[] fullname = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;Homer&quot;</span>, <span class="string">&quot;Simpson&quot;</span> &#125;;</span><br><span class="line">        p.setName(fullname); <span class="comment">// 传入fullname数组</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;</span></span><br><span class="line">        fullname[<span class="number">0</span>] = <span class="string">&quot;Bart&quot;</span>; <span class="comment">// fullname数组的第一个元素修改为&quot;Bart&quot;</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;还是&quot;Bart Simpson&quot;?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.name[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String[] name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>fullname</code>和<code>name</code>同步更改，原因是<code>new String[]&#123;&#125;</code><strong>创建了一个对象</strong>，而<code>fullname</code>和<code>p.name</code><strong>指向了同一个对象</strong>。关键是创建了一个对象</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p> 构造方法初始化实例，<strong>构造方法名就是类名</strong>，<strong>无返回值</strong>。<br> 调用该方法，必须用<code>new</code>操作符</p><p> 如果既对字段进行初始化，又在构造方法中对字段进行初始化,会发生什么？</p><p> 在Java中，创建对象实例的时候，按照如下顺序进行初始化：</p><ul><li><p>先初始化字段：int age = 10;表示字段初始化为10，double salary;表示字段默认初始化为0，String name;表示引用类型字段默认初始化为null；</p></li><li><p>执行构造方法的代码进行初始化。</p></li></ul><p>因此，构造方法的代码是后运行，将覆盖一开始字段初始化。</p><p>多构造方法，用法类似方法重载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="方法重载-OverLoad-："><a href="#方法重载-OverLoad-：" class="headerlink" title="方法重载(OverLoad)："></a>方法重载(<code>OverLoad</code>)：</h2><p><strong>同一个类</strong>里定义几个<strong>方法名相同</strong>，功能相似但<strong>参数不同</strong>（参数个数、参数类型不同）的<strong>方法</strong></p><p>换而言之，以参数内容决定方法内容，省去多个函数名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//this用法:方法传进来的参数把对象同名的字段隐藏，需要用this访问,</span></span><br><span class="line"><span class="comment">//this 变量代表对象本身；第二个用法：一个构造函数调用另外一个构造方法</span></span><br><span class="line"></span><br><span class="line">p1.distance(p2);<span class="comment">//当前对象是p1；</span></span><br><span class="line"><span class="comment">//static?</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">double</span> <span class="title function_">distance</span><span class="params">(Point c,Point d)</span>&#123;&#125;<span class="comment">//类是一种数据类型，static静态函数可省略调用对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><p><code>this</code>的用法、对象运算符、匿名对象、包和修饰符</p><h3 id="this-用法"><a href="#this-用法" class="headerlink" title="this 用法"></a>this 用法</h3><ul><li>调用类内的成员变量<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用本类中的其他方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(MyClass mc)</span> &#123;</span><br><span class="line">        System.out.println(mc.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用本类中的其他构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象运算符-instanceof"><a href="#对象运算符-instanceof" class="headerlink" title="对象运算符(instanceof)"></a>对象运算符(instanceof)</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p><code>instanceof</code>运算符使用格式如下：</p><p>( Object reference variable ) instanceof  (class/interface type)<br>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure><p>如果被比较的对象兼容于右侧类型，该运算符仍然返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">Vehicle</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span>  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果为：<code>true</code></p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>今天写不动了，之后两天整理（:cold_sweat:）</p><h3 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h3><ul><li>将功能相近的类放在同一个包里</li><li>某些访问是以包为单位</li><li>由于不同包里可能有相同的类名，一定程度上可以避免命名冲突</li><li>package语句必须是文件中第一条语句</li><li><strong>WARNING</strong> :包没有父子关系。java.util和java.util.zip是不同的包，两者没有任何继承关系。</li></ul><h3 id="private、public、protected、无修饰"><a href="#private、public、protected、无修饰" class="headerlink" title="private、public、protected、无修饰"></a>private、public、protected、无修饰</h3><hr><p>主要参考：</p><ul><li>java上课内容</li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">廖雪峰java课堂</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【JAVA学习笔记1】-面向对象基础&quot;&gt;&lt;a href=&quot;#【JAVA学习笔记1】-面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;【JAVA学习笔记1】 面向对象基础&quot;&gt;&lt;/a&gt;【JAVA学习笔记1】 面向对象基础&lt;/h1&gt;&lt;h2 id=&quot;方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>下学期任务清单</title>
    <link href="https://hongdouzza.github.io/posts/2cb79163.html"/>
    <id>https://hongdouzza.github.io/posts/2cb79163.html</id>
    <published>2024-03-21T15:30:46.000Z</published>
    <updated>2024-03-24T06:31:10.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【随笔】大一下的开学"><a href="#【随笔】大一下的开学" class="headerlink" title="【随笔】大一下的开学"></a>【随笔】大一下的开学</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>3月2号开学，嗯，现在大概三个星期过去了。除了离散、大物、近代史，其他课一概是能翘就翘，不能翘就写作业，属实无聊。无聊嘛，就水水杭助群，翻翻大佬们的博客(<del>虽然越刷越焦虑</del>:joy:)。但刷着刷着，想起这样一句话</p><blockquote><p>人无癖，不可交   ——《幽梦影》  </p><p>人无癖，不可交。所谓“癖”，是内心充满热情的源头。而我身上热情和勇气几乎已经被迷茫和焦虑压垮了。</p></blockquote><h3 id="迷茫与焦虑"><a href="#迷茫与焦虑" class="headerlink" title="迷茫与焦虑"></a>迷茫与焦虑</h3><p>   说实话，java课硬生生上成了语法课，三节课昏昏沉沉过去，结果对自己“要学”的一无所知。高数课也是如此，真不如我自学，半个小时能抵得上她讲三节课。  </p><p>   必修课是这个状态，那么想着给自己补点人文素养，选了几门人文公选课。一个是讲道德经的，打着当代价值的旗号，<strong>实质除了给现有世界政治经济模式背书，就空空如也</strong>，讲课没有批判力，更没有辩证法，漫画化、正面化的成功人士充斥课堂。WTO嘛，蜻蜓点水，简单性介绍知识，没意思。  </p><p>   这些都是热门课，公评所谓“有真才”“给分高”，去年抢到手可是兴奋了好一阵子，可事实证明</p><blockquote><p>人不能总抱有过高的期待</p></blockquote><p>   最近寝室也出现些矛盾，开麦游戏太吵的，说我弹琴太吵，拌了口角，也没有下文；洗衣机也总是洗出纸屑，很烦，结果也没人主动处理干净；今天下文花了半个小时“起草”寝室规定，也不知道能不能开个小会通过规定。<strong>本以为只有五个人的世界是不需要成文规定的</strong></p><p>  最近还有好多事情要做。互联网+的项目感觉<strong>没戏</strong>。看着商业计划书，有虚玄的感觉。我接口一个都没做。(寄:cold_sweat:)下周五，还有个藤廊音乐节，准备带两首ballad过去，合奏还没练好。</p><p>  说起指弹，我的音乐之路。上个月投的<strong>natasha初赛</strong>石沉大海,结果排了一百多名，没进复赛。不过确实，收音没整好，机位又摆的一坨:hankey:，是我的问题，是我的问题…….</p><p>  现在寝室里人越来越少，恋爱的、团建的、开会的，嗯….</p><p><strong>我该何去何从</strong></p><h3 id="何去何从"><a href="#何去何从" class="headerlink" title="何去何从"></a>何去何从</h3><p>我高中时想当物理学家，努力过，算的上中上水平，但属实没有天赋，加上高考失利，读了计算机。身边佬都是打过noip的，上个学期想了一个月的acm，后来还是放弃，恐怕入了队，最后也会被末尾淘汰，实在没有勇气（<del>陪了夫人又折兵</del>）</p><p>读CS，也学大物，没了当初的热情，现在才发觉</p><blockquote><p>物理学不是我的热爱所在</p></blockquote><p>不打acm，不想去学生组织，想着总要有个技术团体吧，在计科协的介绍下认识了杭助。作为小白，啥都不懂，国庆花了一个星期做面试题，最后很幸运过了。现在想想，真的很幸运。在这里，你遇到到一群真心热爱技术的伙伴（<del>尽管我只会复读，插不上话</del>）。</p><p>所以将来，我是找工作呢，还是读研，还是卷GPA保研呢？</p><p>不管那么多，先提升自己再说。</p><h3 id="提升自己"><a href="#提升自己" class="headerlink" title="提升自己"></a>提升自己</h3><p>我大概两条路线：做音乐、做IT技术。列个这学期的清单</p><p> 后端学习清单：</p><ul><li>学完GO</li><li>学习<code>mysql</code>数据库基础</li><li>学<code>Linux</code></li><li>算法学一下（算法竞赛）</li><li><strong>日更博客</strong>（<del>一般是技术博客</del>）</li><li><a href="https://itwanger.gitee.io/tobebetterjavaer/#/docs/xuexiluxian/go">GO进阶之路</a><br><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xuexiluxian/go-7.jpg" alt="附上GO学习路线"></li></ul><p>音乐路线任务清单：</p><ul><li>[ ] 学完爵士和声所有内容</li><li>[ ] 在指板上展现理论内容</li><li>[ ] 每周扒带一首</li><li>[ ] 写点曲子</li><li>[ ] 参加WAGF、吉他中国举办的比赛.(今年翻弹组，明年在走原创)</li><li>[ ] 学混音（EQ、压缩、混响、母带）</li></ul><p>就这样吧，现在刚好是22号零点。<strong>搁笔睡觉！</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;【随笔】大一下的开学&quot;&gt;&lt;a href=&quot;#【随笔】大一下的开学&quot; class=&quot;headerlink&quot; title=&quot;【随笔】大一下的开学&quot;&gt;&lt;/a&gt;【随笔】大一下的开学&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;3月2号开学，嗯，现在大概三个星期过去了。除了离散、大物、近代史，其他课一概是能翘就翘，不能翘就写作业，属实无聊。无聊嘛，就水水杭助群，翻翻大佬们的博客(&lt;del&gt;虽然越刷越焦虑&lt;/del&gt;:joy:)。但刷着刷着，想起这样一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人无癖，不可交   ——《幽梦影》  &lt;/p&gt;
&lt;p&gt;人无癖，不可交。所谓“癖”，是内心充满热情的源头。而我身上热情和勇气几乎已经被迷茫和焦虑压垮了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;迷茫与焦虑&quot;&gt;&lt;a href=&quot;#迷茫与焦虑&quot; class=&quot;headerlink&quot; title=&quot;迷茫与焦虑&quot;&gt;&lt;/a&gt;迷茫与焦虑&lt;/h3&gt;&lt;p&gt;   说实话，java课硬生生上成了语法课，三节课昏昏沉沉过去，结果对自己“要学”的一无所知。高数课也是如此，真不如我自学，半个小时能抵得上她讲三节课。  &lt;/p&gt;
&lt;p&gt;   必修课是这个状态，那么想着给自己补点人文素养，选了几门人文公选课。一个是讲道德经的，打着当代价值的旗号，&lt;strong&gt;实质除了给现有世界政治经济模式背书，就空空如也&lt;/strong&gt;，讲课没有批判力，更没有辩证法，漫画化、正面化的成功人士充斥课堂。WTO嘛，蜻蜓点水，简单性介绍知识，没意思。  &lt;/p&gt;
&lt;p&gt;   这些都是热门课，公评所谓“有真才”“给分高”，去年抢到手可是兴奋了好一阵子，可事实证明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人不能总抱有过高的期待&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   最近寝室也出现些矛盾，开麦游戏太吵的，说我弹琴太吵，拌了口角，也没有下文；洗衣机也总是洗出纸屑，很烦，结果也没人主动处理干净；今天下文花了半个小时“起草”寝室规定，也不知道能不能开个小会通过规定。&lt;strong&gt;本以为只有五个人的世界是不需要成文规定的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  最近还有好多事情要做。互联网+的项目感觉&lt;strong&gt;没戏&lt;/strong&gt;。看着商业计划书，有虚玄的感觉。我接口一个都没做。(寄:cold_sweat:)下周五，还有个藤廊音乐节，准备带两首ballad过去，合奏还没练好。&lt;/p&gt;
&lt;p&gt;  说起指弹，我的音乐之路。上个月投的&lt;strong&gt;natasha初赛&lt;/strong&gt;石沉大海,结果排了一百多名，没进复赛。不过确实，收音没整好，机位又摆的一坨:hankey:，是我的问题，是我的问题…….&lt;/p&gt;
&lt;p&gt;  现在寝室里人越来越少，恋爱的、团建的、开会的，嗯….&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我该何去何从&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;何去何从&quot;&gt;&lt;a href=&quot;#何去何从&quot; class=&quot;headerlink&quot; title=&quot;何去何从&quot;&gt;&lt;/a&gt;何去何从&lt;/h3&gt;&lt;p&gt;我高中时想当物理学家，努力过，算的上中上水平，但属实没有天赋，加上高考失利，读了计算机。身边佬都是打过noip的，上个学期想了一个月的acm，后来还是放弃，恐怕入了队，最后也会被末尾淘汰，实在没有勇气（&lt;del&gt;陪了夫人又折兵&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;读CS，也学大物，没了当初的热情，现在才发觉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;物理学不是我的热爱所在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不打acm，不想去学生组织，想着总要有个技术团体吧，在计科协的介绍下认识了杭助。作为小白，啥都不懂，国庆花了一个星期做面试题，最后很幸运过了。现在想想，真的很幸运。在这里，你遇到到一群真心热爱技术的伙伴（&lt;del&gt;尽管我只会复读，插不上话&lt;/del&gt;）。&lt;/p&gt;
&lt;p&gt;所以将来，我是找工作呢，还是读研，还是卷GPA保研呢？&lt;/p&gt;
&lt;p&gt;不管那么多，先提升自己再说。&lt;/p&gt;
&lt;h3 id=&quot;提升自己&quot;&gt;&lt;a href=&quot;#提升自己&quot; class=&quot;headerlink&quot; title=&quot;提升自己&quot;&gt;&lt;/a&gt;提升自己&lt;/h3&gt;&lt;p&gt;我大概两条路线：做音乐、做IT技术。列个这学期的清单&lt;/p&gt;
&lt;p&gt; 后端学习清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学完GO&lt;/li&gt;
&lt;li&gt;学习&lt;code&gt;mysql&lt;/code&gt;数据库基础&lt;/li&gt;
&lt;li&gt;学&lt;code&gt;Linux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;算法学一下（算法竞赛）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日更博客&lt;/strong&gt;（&lt;del&gt;一般是技术博客&lt;/del&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itwanger.gitee.io/tobebetterjavaer/#/docs/xuexiluxian/go&quot;&gt;GO进阶之路&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xuexiluxian/go-7.jpg&quot; alt=&quot;附上GO学习路线&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;音乐路线任务清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] 学完爵士和声所有内容&lt;/li&gt;
&lt;li&gt;[ ] 在指板上展现理论内容&lt;/li&gt;
&lt;li&gt;[ ] 每周扒带一首&lt;/li&gt;
&lt;li&gt;[ ] 写点曲子&lt;/li&gt;
&lt;li&gt;[ ] 参加WAGF、吉他中国举办的比赛.(今年翻弹组，明年在走原创)&lt;/li&gt;
&lt;li&gt;[ ] 学混音（EQ、压缩、混响、母带）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就这样吧，现在刚好是22号零点。&lt;strong&gt;搁笔睡觉！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hongdouzza.github.io/posts/4a17b156.html"/>
    <id>https://hongdouzza.github.io/posts/4a17b156.html</id>
    <published>2023-10-22T08:44:24.791Z</published>
    <updated>2023-11-14T10:31:03.263Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
